esphome:
  name: helo
  comment: Sauna controller
  area: Sauna

esp32:
  #change right board for your device
  board: m5stack-atom

# Enable logging
logger:
  level: DEBUG
  # disable putting logging on the HW uart
  baud_rate: 0

# Enable Home Assistant API
api:

# Enable OTA updates and read logs with wifi
ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  #recommended to manually configure ip address
  manual_ip:
    # Set this to the IP of the ESPhome device
    static_ip: 192.168.1.173
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

uart:
  # change right pins for your ESPhome device
  tx_pin: GPIO26
  rx_pin: GPIO32
  baud_rate: 19200
  data_bits: 8
  parity: EVEN
  stop_bits: 1
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: [0x9C]
    sequence:
      - lambda: |-
          // hide keepalive messages
          // 98:40:06:6D:3A:9C
          // 98:40:07:FD:E3:9C
          if ( bytes[5] != 0x9C ) {

            if ( bytes[2] == 0x06 ) {ESP_LOGI("uart", "\nrequest, from heater to control");}

            if ( bytes[2] == 0x07 ) {ESP_LOGI("uart", "\ncommand, from control to heater");}

            if ( bytes[2] == 0x08 ) {ESP_LOGI("uart", "\ndata, from heater to control");

              uint32_t data = ((uint32_t) bytes[5]) << 24; // put the MSB in place
              data |= ((uint32_t) bytes[6]) << 16; // add next byte
              data |= ((uint32_t) bytes[7]) << 8; // add next byte
              data |= ((uint32_t) bytes[8]); // add LSB"
              ESP_LOGI("uart", "\ndata: %zu", data);
            
              if ( bytes[3] == 0x60 && bytes[4] == 0x00) { // temperature data

                ESP_LOGI("uart", "\ntemperature data");

                int actualTemp = ceil((data & 0x00007FF) / 9.0);
                id(current_temp).publish_state(actualTemp);
                ESP_LOGI("uart", "\nactualTemp: %d", actualTemp);

                int setPointTemp = ceil(((data >> 11) & 0x00007FF) / 9.0);
                id(set_temp).publish_state(setPointTemp);
                ESP_LOGI("uart", "\nsetPointTemp: %d", setPointTemp);

              }
            }

            if ( bytes[2] == 0x09 ) {ESP_LOGI("uart", "\ndata, from control to heater");}

            else { ESP_LOGI("uart", "\nUNKNOWN"); }

          UARTDebug::log_hex(direction, bytes, ' ');
          
          }
sensor:
  - platform: template
    name: "Current Temperature"
    id: "current_temp"
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
  - platform: template
    name: "Set Temperature"
    id: "set_temp"
    unit_of_measurement: "°C"
    device_class: "temperature"

button:
  - platform: uart
    name: "ON"
    #98 40 07 70 00 00 04 00 40 74 91 6E 9C
    data: [0x98, 0x40, 0x07, 0x70, 0x00, 0x00, 0x04, 0x00, 0x40, 0x74, 0x91, 0x6E, 0x9C]
  - platform: uart
    name: "OFF"
     #98 40 07 70 00 00 04 00 80 6C D6 9C
    data: [0x98, 0x40, 0x07, 0x70, 0x00, 0x00, 0x04, 0x00, 0x80, 0x6C, 0xD6, 0x9C]

    
